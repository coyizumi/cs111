------------------------------------------------------------------------------

# Scanner

------------------------------------------------------------------------------
Exports the read_line() function, which reads from stdin one line at a time
and splits each line into an array of individual words and special characters.
------------------------------------------------------------------------------

# Data Structures

------------------------------------------------------------------------------
command_s

Used to create a linked list of commands. Each node contains an argument
vector (argv), a trailing special character (following_special), and a link
to the next node.

The argument vector is either a command (including arguments), or a filename
if the preceding command ended with a > or <.

Trailing special characters are kept track of in order to support input/output
redirection through >, <, and |.

A linked list is used because it is easy to set up and allows chains of piped
commands to be executed using recursion (see the execute_command() function).

The functions new_command_s() is used to create a command_s. It takes in the
argument vector of a command as its argument.

The function free_command_s() frees all of the memory associated with the
given command_s, including the argument vector and all accessable links.

The function print_command_s() prints all the command_s structures in the 
list. It was used in previous versions for debugging.
------------------------------------------------------------------------------

# Utility Functions

------------------------------------------------------------------------------
int check_commands (char **args)

Checks the first entry in the given argument
vector for built-in commands (currently only exit is supported). If a built-in
command is found, it is executed.

Returns 1 on completion of a command, -1 on failure, and 0 if no command is
executed.
------------------------------------------------------------------------------
int check_special (char *str)

Checks the given string to see if it contains a special character (<,>,|).

Returns an integer represention of the special character if one is found,
otherwise returns 0.
------------------------------------------------------------------------------
int fork_and_exec (int readfd, int writefd, char *path, char **argv)

Given file descriptors to read from and write to, a path to an executable, and
an argument vector, fork_and_exec will fork a new process, replace the STDIN
and STDOUT file descriptors with readfd and writefd (if necessary), and run
execvp with the given executable and argument vector. It contains all
appropriate error checking.

Returns the pid of the created process to the parent.
------------------------------------------------------------------------------

# Utility Macros

------------------------------------------------------------------------------
perror_die_on_true(expr)

If the given expression is true, will call perror and then exit(1).

While handling errors, I found that there were many instances where the only
response to an error was to print an error message and die. The code to do
this consists of a 4-5 line if statement. Placing these nearly identical
blocks of code at every system call looked messy, so I condensed them into a
macro to clean things up.

Example: perror_die_on_true (close (fd) < 0)
------------------------------------------------------------------------------

# Core Functions

------------------------------------------------------------------------------
int execute_commands (int readfd, command_s *root)

Given a file descriptor to read from, and a command_s, executes the command(s)
specified by the command_s. The body of the function handles 4 possible cases
each relating to the special character following the given command. These
cases are: <,>,|, and no special character.

Each case results in a call to the utility function fork_and_exec with values
for the read and write file descriptors as follows:

case no special character: 
	Read: readfd
	Write: stdout
case <: 
	Read: The specified file
	Write: stdout OR the write end of a pipe (if a pipe follows the specified
		   file in the command_s list)
case >: 
	Read: readfd
	Write: The specified file
case |:
	Read: readfd
	Write: The write end of a pipe

In the case of a pipe, execute_commands() is called recursively with the read
end of the pipe as the readfd argument and root->next as the command_s.

Once the parent has created all children, readfd is closed if it is a pipe.
The parent then waits for the children to complete.

Returns the status given by waitpid(), or 0 on a recoverable failure.
------------------------------------------------------------------------------
int parse_args (char **args)

Given a list of arguments, executes all of the commands contained in the
arguments.

This is done by first executing any internal commands by using the
check_commands() utility function.

If no internal commands were found, parse_args loops through the contents of
args to build a linked list of command_s.

Then the execute_commands() function is called with stdin as the readfd, and
the created list of command_s as the root.

Once done, the created list of command_s is freed.

Returns 0 for success, -1 for failure.
------------------------------------------------------------------------------
int main(int argc, char **argv)

The arguments to main are not used.

Main consists of a main loop that repeatedly calls read_line() from the
scanner and passes the results to parse_args(). Before each line is read, a
"$ " is printed.

When read_line() reaches EOF, main calls lex_cleanup() to free all memory
associated with the scanner.
------------------------------------------------------------------------------
