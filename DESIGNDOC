    /****************************************************************/
   /                   #######################                      /
  /                    ## Asgn 4 Design Doc ##                     /
 /                     #######################                    /
/****************************************************************/
Team: cmhumphr, jwvance, tmakwan
Date: 3/12/16

#---------------------------------------------------------------------------#
# Intro: CryptoFS                                                           #
#---------------------------------------------------------------------------#
The goal for assignment 4 is to implement a file system in FreeBSD that will
encrypt and decrypt files upon write and read; namely: CryptoFS. Files will
be encrypted using the AES (Advanced Encryption Standard) encryption on a per
file basis. CryptoFS will check the sticky bit of files (permission bit), if
the bit is set, then the file has been encrypted. If not, it exists in it's
plaintext form. 

There are four major parts to this assignment: implementing a system call,
mounting nullFS and modifying it, creating a program setkey.c, and creating
a program protectfile.c.



#---------------------------------------------------------------------------#
# PART 1: Implementing a custom system call, setkey()                       #
#---------------------------------------------------------------------------#

---Steps for Implementing a System Call---
  1. Append “546  AUE_NULL  STD { int setkey(unsigned int k0, unsigned int k1);}” 
        to the syscall master library /kern/syscalls.master.
  2. cd to /sys/kern then run  $ make sysent
  3. Add the c file declaration in /sys/conf/files as "kern/sys_setkey.c  standard"
  4. Create the file sys_setkey.c in the folder “kern/sys_setkey.c”
  5. Another declaration spot is in “/kern/capabilities.conf”, label it “setkey”
  6. Finally go to the “usr/src” and build/install the kernel, then reboot
  7. To call the system call, it looks like “syscall(546,1,1)” ← Example

This system call will take two arguments: two 32-bit ints. These ints make up
the least significant 64-bits of the 128-bit encryption key. The most significant
64-bits will be all zeros. The system call will check the real user id of the 
caller and store their respective encryption key in a static array. 

The static array is declared in /sys/sys/keys.h. This file contains 



#---------------------------------------------------------------------------#
# PART 2: Mounting NullFS                                                   #
#---------------------------------------------------------------------------#
NullFS is a stackable file system that makes up the base for CryptoFS. 
NullFS is a copy of the null layer, which was modified to implement the 
encryption/decryption capability. 

NullFS is already installed on FreeBSD. In order to mount it on a directory, 
the command $ mount_nullfs can be used. This command takes in two arguments: 
    1)The path to the directory to mimic 
    2) the mount point. 
    
For example:
    $ mkdir ~/test
    $ sudo mount_nullfs /usr/bin test
Now /test is /usr/bin with nullfs on top of it. It works a bit like symbolic
links.

NullFS source code locations:
    - /sys/fs/nullfs
    - /sbin/mount_nullfs/mount_nullfs.c
    - /sys/modules/nullfs/Makefile   (used to build code)

#---------------------------------------------------------------------------#
# PART 3: The setkey.c program                                              #
#---------------------------------------------------------------------------#
    The general purpose of this program is to assign a user with 




#---------------------------------------------------------------------------#
# PART 4: The protectfile.c program                                         #
#---------------------------------------------------------------------------#




