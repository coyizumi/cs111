----------------------------------------------------------------------

# Data Structures

----------------------------------------------------------------------

# Lottery Queue (lottoq)

The lottoq takes advantage of the TAILQ macros found in sys/queue.h.
It holds a TAILQ of threads and keeps track of the total ticket count
of threads it holds.

The definition is as follows:

struct lottoq {
	struct lotto head;
	int T;
};

Lottery Queue Functions
----------------------------------------------------------------------
# static void lottoq_init(struct lottoq *q)

Initializes the internal TAILQ and sets the total tickets to 0.

Assumes q points to a valid lottoq struct.
----------------------------------------------------------------------
# static void lottoq_add(struct lottoq *q, struct thread *td)

Adds the thread td to lottoq q. Updates the ticket count.

Assumes q and td point to a valid lottoq and thread.
----------------------------------------------------------------------
# static void lottoq_remove (struct lottoq *q, struct thread *td)

Removes the thread td from lottoq q. Updates the ticket count.

Assumes q and td point to a valid lottoq and thread.
----------------------------------------------------------------------
# struct thread *lottoq_choose(struct lottoq *q)

Performs a lottery selection. Pulls a ticket and finds the thread with
the pulled ticket.

Returns the chosen thread.

Assumes q points to a valid lottoq.
----------------------------------------------------------------------

# Thread

To accomadate the new Lottery Queue, the thread struct was modified
slightly. It now has four additional fields:

1. TAILQ_ENTRY(thread) td_lottoq
	Used to create the internal TAILQ of the Lottery Queue.

2. int td_tickets;
	The tickets the thread owns. Used to select a winner in
	lottoq_choose().

3. int td_base_tickets;
	The base tickets, set by nice.

4. struct lottoq *td_owning_lottoq
	The lottoq that this thread is currently queued in. This is used
	to update the ticket totals whenever td is assigned a different
	ticket count.

----------------------------------------------------------------------

# tdq

To accomodate the new Lottery Queue, the tdq struct in sched_ule was
modified to include three lottoqs. One each for interactive, timeshare
and idle processes.

----------------------------------------------------------------------

# td_sched

To accomodate the new Lottery Queue, the td_sched struct in sched_ule
was modified to keep track of the most recently used lottoq.

----------------------------------------------------------------------

# Utility Macros

----------------------------------------------------------------------
# TD_IS_ROOT(td)

If the given thread has an effective user ID of 0, this evaluates to
true. Else it is false.
----------------------------------------------------------------------
# P_IS_ROOT(p)

If the given process has an effective user ID of 0, this evaluates to
true. Else it is false.
----------------------------------------------------------------------

# Core Functions

----------------------------------------------------------------------
# tdq_runq_add(struct tdq *tdq, struct thread *td, int flags)

This function is used to add a thread to a tdq. We have added code to
add this thread to a lottoq if it is not owned by root.

This is accomplished using a combination of the TD_IS_ROOT macro to
check for rootness, and the lottoq_add() function to add the thread to
a lottoq.
----------------------------------------------------------------------
# tdq_runq_rem(struct tdq *tdq, struct thread *td)

This function is used to remove a thread from a tdq. We have added
code to remove the thread from a lottoq instead if it is not owned by
root.

This is accomplished using a combination of TD_IS_ROOT and the
lottoq_remove() function.
----------------------------------------------------------------------
# lottoq_steal(struct lottoq *q, int cpu)

This function applies the logic of runq_steal to a Lottery Queue.

It finds and returns the first thread in the given lottery queue that
can be migrated and scheduled on the new CPU.
----------------------------------------------------------------------
# tdq_steal(struct tdq *tdq, int cpu)

This function is used to steal a thread from a thread queue. We have
added code to steal a thread from a Lottery Queue if there are no
stealable threads in the realtime and interactive runqs.

This is accomplished by using lottoq_steal().
----------------------------------------------------------------------
# tdq_choose(struct tdq *tdq)

This function is used to choose a task from the tdq. We have added
code to choose a task from a lottoq if there are no tasks available on
the built-in runqs.

This is accomplished by using lottoq_choose().
----------------------------------------------------------------------
# tdq_setup(struct tdq *tdq)

This function is used to initialize a tdq. We have added code to
initialize the three lottoqs that we added to tdq.
----------------------------------------------------------------------
# sched_priority(struct thread *td)

This function assigns the given thread a new priority. We have added
code to assign the thread a new ticket count as well.

We use the compare the interactive score to the interactive threshold
to determine if the process has been waiting a sufficient amount. If
it is below the threshold, we reward its patient waiting with more
tickets. If it is equal or above, we remove some tickets to teach it
a lesson.

We keep track of a base ticket count, initialized at 500 and set to
the value of later nice() calls.

If the thread has waited a sufficient amount, it receives additional
tickets equal to the base ticket count. If it is being punished for
high cpu usage, it loses tickets equal to the base count divided by
two.

Our goal in choosing this method is to provide a fast increase in well
behaved threads, and a slower but still speedy decrease in poorly
behaved threads. Additionally, we would like processes that are good
to have a very fast increase in priority to begin with, followed by
a slower (relative) increase later. By adding the base count each time
the priority will double the first time, then increase by 50%, then
~33%, 25%, and so on.

After adjusting the ticket amounts, we update the total in the 
thread's owning lottoq.
----------------------------------------------------------------------
# sched_nice(struct proc *p, int nice)

This function sets the nice value of a root process, and we have
edited it to set the ticket count (both current and base) of all of
the threads within a user process.
----------------------------------------------------------------------
# donice(struct thread *td, struct proc *p, int n)

This function performs bounds checking on n before passing it to
sched_nice(). We have edited it so that for user processes the bounds
are 1 to 100,000 for the ticket count. For root processes it remains
the same.
----------------------------------------------------------------------